.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::TagInfoXML 3"
.TH Image::ExifTool::TagInfoXML 3 "2014-01-02" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::TagInfoXML \- Read/write tag information XML database
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to generate an \s-1XML\s0 database from all ExifTool tag
information.  The \s-1XML\s0 database may then be edited and used to re-generate
the language modules (Image::ExifTool::Lang::*).
.SH "METHODS"
.IX Header "METHODS"
.SS "Write"
.IX Subsection "Write"
Print complete tag information database in \s-1XML\s0 format.
.PP
.Vb 2
\&  # save list of all tags
\&  $success = Image::ExifTool::TagInfoXML::Write(\*(Aqdst.xml\*(Aq);
\&
\&  # list all IPTC tags to console, including Flags
\&  Image::ExifTool::TagInfoXML::Write(undef, \*(AqIPTC\*(Aq, Flags => 1);
\&
\&  # write all EXIF Camera tags to file
\&  Image::ExifTool::TagInfoXML::Write($outfile, \*(Aqexif:camera\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) [optional] Output file name, or undef for console output.  Output file
will be overwritten if it already exists.
.Sp
1) [optional] String of group names separated by colons to specify the group
to print.  A specific \s-1IFD\s0 may not be given as a group, since \s-1EXIF\s0 tags may
be written to any \s-1IFD\s0.  Saves all groups if not specified.
.Sp
2) [optional] Hash of options values:
.Sp
.Vb 2
\&    Flags   \- Set to output \*(Aqflags\*(Aq attribute
\&    NoDesc  \- Set to suppress output of descriptions
.Ve
.IP "Return Value:" 4
.IX Item "Return Value:"
True on success.
.IP "Sample \s-1XML\s0 Output:" 4
.IX Item "Sample XML Output:"
.PP
.Vb 2
\&  <?xml version=\*(Aq1.0\*(Aq encoding=\*(AqUTF\-8\*(Aq?>
\&  <taginfo>
\&
\&  <table name=\*(AqXMP::dc\*(Aq g0=\*(AqXMP\*(Aq g1=\*(AqXMP\-dc\*(Aq g2=\*(AqOther\*(Aq>
\&   <desc lang=\*(Aqen\*(Aq>XMP Dublin Core</desc>
\&   <tag id=\*(Aqtitle\*(Aq name=\*(AqTitle\*(Aq type=\*(Aqlang\-alt\*(Aq writable=\*(Aqtrue\*(Aq g2=\*(AqImage\*(Aq>
\&    <desc lang=\*(Aqen\*(Aq>Title</desc>
\&    <desc lang=\*(Aqde\*(Aq>Titel</desc>
\&    <desc lang=\*(Aqfr\*(Aq>Titre</desc>
\&   </tag>
\&   ...
\&  </table>
\&
\&  </taginfo>
.Ve
.PP
Flags (if selected and available) are formatted as a comma-separated list of
the following possible values:  Avoid, Binary, List, Mandatory, Permanent,
Protected, Unknown and Unsafe.  See the
tag name documentation and
lib/Image/ExifTool/README for a description of these flags.  For \s-1XMP\s0 List
tags, the list type (Alt, Bag or Seq) is also output as a flag if
applicable.
.SS "BuildLangModules"
.IX Subsection "BuildLangModules"
Build all Image::ExifTool::Lang modules from an \s-1XML\s0 database file.
.PP
.Vb 1
\&    Image::ExifTool::TagInfoXML::BuildLangModules(\*(Aqsrc.xml\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) \s-1XML\s0 file name
.Sp
1) Update flags:
.Sp
.Vb 4
\&    0x01 = preserve version numbers
\&    0x02 = update all modules, even if they didn\*(Aqt change
\&    0x04 = update from scratch, ignoring existing definitions
\&    0x08 = override existing different descriptions and values
.Ve
.IP "Return Value:" 4
.IX Item "Return Value:"
Number of modules updated, or negative on error.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2014, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImage::ExifTool\fR\|(3pm),
\&\fIImage::ExifTool::TagNames\fR\|(3pm)
